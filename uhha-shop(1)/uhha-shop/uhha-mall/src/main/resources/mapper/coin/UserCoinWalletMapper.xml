<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.uhha.coin.user.mapper.UserCoinWalletMapper">

  <sql id="userCoinWalletColumn">id, uid, coin_id, total, frozen, borrow, ico, gmt_create, gmt_modified</sql>
  
 
  <insert id="insert" parameterType="io.uhha.coin.user.domain.UserCoinWallet">
    insert into user_coin_wallet (uid, coin_id,
      total, frozen, borrow, ico,
      gmt_create,gmt_modified)
    values (#{uid,jdbcType=INTEGER}, #{coinId,jdbcType=INTEGER},
      #{total,jdbcType=DECIMAL}, #{frozen,jdbcType=DECIMAL}, #{borrow,jdbcType=DECIMAL}, #{ico,jdbcType=DECIMAL},
      #{gmtCreate,jdbcType=TIMESTAMP},#{gmtModified,jdbcType=TIMESTAMP})
  </insert>
  
  <update id="updateByPrimaryKey" parameterType="io.uhha.coin.user.domain.UserCoinWallet">
    update user_coin_wallet
    set uid = #{uid,jdbcType=INTEGER},
      coin_id = #{coinId,jdbcType=INTEGER},
      total = #{total,jdbcType=DECIMAL},
      frozen = #{frozen,jdbcType=DECIMAL},
      borrow = #{borrow,jdbcType=DECIMAL},
      ico = #{ico,jdbcType=DECIMAL},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="updateFrozenByUidAndCoinId" parameterType="io.uhha.coin.user.domain.UserCoinWallet">
    update user_coin_wallet
    set  frozen = frozen + #{frozen,jdbcType=DECIMAL},
    gmt_modified = #{gmtModified,jdbcType=TIMESTAMP}
    where uid =#{uid,jdbcType=INTEGER} AND coin_id = #{coinId,jdbcType=INTEGER}
  </update>

  <select id="selectByUidAndCoin" resultType="io.uhha.coin.user.domain.UserCoinWallet">
    select <include refid="userCoinWalletColumn" />
    from user_coin_wallet
    where uid = #{uid} and coin_id = #{coinId,jdbcType=INTEGER}
  </select>
  
  <select id="selectByUidAndCoinLock" resultType="io.uhha.coin.user.domain.UserCoinWallet">
    select <include refid="userCoinWalletColumn" />
    from user_coin_wallet
    where uid = #{uid} and coin_id = #{coinId} for update
  </select>
  
  <select id="selectByUid" resultType="io.uhha.coin.user.domain.UserCoinWallet">
    select wallet.*,coin.name as coinName,coin.short_name as shortName,coin.app_logo as logo
    from user_coin_wallet wallet
	LEFT JOIN system_coin_type coin on wallet.coin_id = coin.id
    where uid = #{uid} and coin.status != 2 order by coin.sort_id
  </select>

  <select id="selectByParam" resultType="io.uhha.coin.user.domain.UserCoinWallet" parameterType="java.util.Map">
   SELECT wallet.*,coin.name AS coinName,coin.short_name AS shortName,coin.app_logo AS logo
    FROM user_coin_wallet wallet
    LEFT JOIN system_coin_type coin ON wallet.coin_id = coin.id
    WHERE uid = #{uid}
        AND coin.status != 2
        <if test="keywords !=null">
          AND coin.`name` LIKE  CONCAT(CONCAT('%', #{keywords}), '%')
        </if>
        ORDER BY coin.sort_id
        limit #{offset},#{limit}
  </select>

  <select id="countByParam" resultType="java.lang.Integer" parameterType="java.util.Map">
    select count(wallet.id) from user_coin_wallet wallet
      LEFT JOIN system_coin_type coin ON wallet.coin_id = coin.id
    where 1=1
    and  wallet.uid = #{uid}
    AND  coin.status != 2
    <if test="keywords !=null">
      and  coin.`name` LIKE  CONCAT(CONCAT('%', #{keywords}), '%')
    </if>

  </select>

  <resultMap id="allInfo" type="java.util.Map">
    <result column="sum(total)" property="total" jdbcType="DECIMAL" />
    <result column="sum(frozen)" property="frozen" jdbcType="DECIMAL" />
    <result column="sum(borrow)" property="borrow" jdbcType="DECIMAL" />
  </resultMap>

  <select id="selectSum" resultMap="allInfo" parameterType="java.lang.Integer">
    select sum(total), sum(frozen),sum(borrow) from user_coin_wallet where coin_id = #{coinid}
  </select>


  <select id="countAdminPage" resultType="int" parameterType="java.util.Map">
    select
    count(*)
    from
    user_coin_wallet left join
    ums_member on ums_member.id = user_coin_wallet.uid
    where 1=1
    <if test="keyword != null">
      and (
      ums_member.username like concat('%',#{keyword,jdbcType=VARCHAR},'%') or
      ums_member.nickname like concat('%',#{keyword,jdbcType=VARCHAR},'%') or
      ums_member.firstName like concat('%',#{keyword,jdbcType=VARCHAR},'%') or
      ums_member.lastName like concat('%',#{keyword,jdbcType=VARCHAR},'%')
      )
    </if>
    <if test="coinId != null">
      and user_coin_wallet.coin_id = ${coinId}
    </if>
    <if test="fuids != null">
      and ums_member.id in
      <foreach collection="fuids" item="item" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
  </select>

  <select id="getAdminPageList" resultType="UserCoinWallet" parameterType="java.util.Map">
    select
    user_coin_wallet.id,
    user_coin_wallet.uid,
    user_coin_wallet.total,
    user_coin_wallet.frozen,
    user_coin_wallet.borrow,
    user_coin_wallet.ico,
    user_coin_wallet.gmt_modified,
    user_coin_wallet.coin_id,
    ums_member.username loginName,
    ums_member.nickname nickName,
    concat(ums_member.firstname,' ',ums_member.lastname) realName,
    system_coin_type.name coinName
    from
    user_coin_wallet left join
    ums_member on ums_member.id = user_coin_wallet.uid left join
    system_coin_type on system_coin_type.id = user_coin_wallet.coin_id
    where 1=1
    <if test="keyword != null">
      and (
      ums_member.username like concat('%',#{keyword,jdbcType=VARCHAR},'%') or
      ums_member.nickname like concat('%',#{keyword,jdbcType=VARCHAR},'%') or
      ums_member.firstname like concat('%',#{keyword,jdbcType=VARCHAR},'%') or
      ums_member.lastname like concat('%',#{keyword,jdbcType=VARCHAR},'%')
      )
    </if>
    <if test="fuids != null">
      and ums_member.id in
      <foreach collection="fuids" item="item" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="coinId != null">
      and user_coin_wallet.coin_id = ${coinId}
    </if>
    <if test="orderField != null">
      order by user_coin_wallet.${orderField} ${orderDirection}
    </if>
    limit #{offset},#{limit}
  </select>

  
</mapper>